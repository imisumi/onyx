#version 460 core

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imageOutput;

#define INF 1.0 / 0.0 //? Infinity

//? View-projection matrix uniform
uniform mat4 viewProjectionMatrix;
uniform mat4 viewProjectionInverseMatrix; //? Inverse for ray generation

uniform uint numIndices; //? Number of indices in the mesh
uniform uint numMeshes; //? Number of indices in the mesh
uniform vec3 cameraPosition;


struct BVHNode
{
	float minX, minY, minZ;    //? 12 bytes - bounding box min point
	float maxX, maxY, maxZ;    //? 12 bytes - bounding box max point
	int leftChildOrPrimOffset;  //? 4 bytes - child node index or triangleId offset if negative
	int rightChildOrPrimCount;  //? 4 bytes - right child index or primitive count when leftChildOrPrimOffset < 0
};

layout(std430, binding = 24) buffer bvhNodes {
	BVHNode nodes[];
};

struct MeshInfo
{
	mat4 invModelMatrix;
	uint positionOffset; //? Offset into the positions array
	uint normalOffset;   //? Offset into the normals array
	uint indexOffset;    //? Offset into the indices array
	uint numVertices;    //? Number of vertices in this mesh
	uint numIndices;     //? Number of indices in this mesh
	uint numFaces;       //? Number of triangles (numIndices / 3)
	uint bvhNodeOffset;  //? Offset into the BVH nodes array for this mesh
	uint aabbOffset;     //? Offset into the AABB array for this mesh
};

layout(std430, binding = 30) buffer meshInfo {
	MeshInfo meshes[];
};

layout(std430, binding = 20) buffer meshPositions {
	float positions[]; //? Flat array of vertex positions
};

layout(std430, binding = 21) buffer meshNormals {
	float normals[]; //? Flat array of vertex normals
};

layout(std430, binding = 22) buffer meshIndices {
	uint indices[]; //? Flat array of triangle indices
};

//? Ray structure
struct Ray {
	vec3 origin;
	vec3 direction;
	vec3 invDirection;
};

//? Hit record structure
struct HitRecord {
	float t;
	vec3 position;
	vec3 normal;
	bool hit;
	uint triangleIndex; //? Index of the hit triangle
	vec3 barycentricCoords; //? Barycentric coordinates for interpolation
	int hitType; //? 0=miss, 1=triangle, 2=bounding box, 3=leaf node
};

vec3 GetInverseDirection(vec3 direction)
{
	const float eps = 1e-5;
	return vec3(
			abs(direction.x) < eps ? 1e10 * sign(direction.x + eps) : 1.0 / direction.x,
			abs(direction.y) < eps ? 1e10 * sign(direction.y + eps) : 1.0 / direction.y,
			abs(direction.z) < eps ? 1e10 * sign(direction.z + eps) : 1.0 / direction.z
		);
}

bool AABB_intersect(Ray ray, vec3 minBounds, vec3 maxBounds, out float tNear, out float tFar) {
	// Add a small epsilon to avoid precision issues
	const float eps = 1e-5;

	vec3 t1 = (minBounds - ray.origin) * ray.invDirection;
	vec3 t2 = (maxBounds - ray.origin) * ray.invDirection;
	
	vec3 tMin = min(t1, t2);
	vec3 tMax = max(t1, t2);
	
	tNear = max(max(tMin.x, tMin.y), tMin.z);
	tFar = min(min(tMax.x, tMax.y), tMax.z);
	
	// Add a small epsilon to the comparison to handle edge cases
	return tNear <= tFar + eps && tFar > 0.0;
}

bool intersectTriangle(Ray ray, vec3 v0, vec3 v1, vec3 v2, out HitRecord record, float currentMinT, uint meshIdx) {
	MeshInfo m = meshes[meshIdx];
	
	// Calculate triangle size to use for adaptive epsilon
	mat4 modelMatrix = inverse(m.invModelMatrix); // Still potentially problematic
	vec3 worldV0 = vec3(modelMatrix * vec4(v0, 1.0));
	vec3 worldV1 = vec3(modelMatrix * vec4(v1, 1.0));
	vec3 worldV2 = vec3(modelMatrix * vec4(v2, 1.0));
	
	// Calculate adaptive epsilon based on triangle size and distance
	vec3 edge1 = worldV1 - worldV0;
	vec3 edge2 = worldV2 - worldV0;
	
	// Triangle size for scale-dependent epsilon
	float triangleSize = length(cross(edge1, edge2)) * 0.5;
	float distToTriangle = length(worldV0 - ray.origin);
	float ADAPTIVE_EPSILON = max(1e-7, min(triangleSize * 1e-5, distToTriangle * 1e-5));
	
	// Möller–Trumbore algorithm with robust handling
	vec3 h = cross(ray.direction, edge2);
	float a = dot(edge1, h);
	
	// More conservative parallel check using adaptive epsilon
	if (abs(a) < ADAPTIVE_EPSILON) {
		return false; // Ray parallel to triangle
	}
	
	float f = 1.0 / a;
	vec3 s = ray.origin - worldV0;
	float u = f * dot(s, h);
	
	// Add tolerance to barycentric tests
	const float BARY_EPSILON = 1e-5;
	if (u < -BARY_EPSILON || u > 1.0 + BARY_EPSILON) {
		return false;
	}
	
	vec3 q = cross(s, edge1);
	float v = f * dot(ray.direction, q);
	
	if (v < -BARY_EPSILON || u + v > 1.0 + BARY_EPSILON) {
		return false;
	}
	
	// Calculate t with the same precision as used above
	float t = f * dot(edge2, q);
	
	// More careful t-value check
	if (t < ADAPTIVE_EPSILON || t >= currentMinT) {
		return false;
	}
	
	// Clamp barycentric coordinates to valid range to fix edge cases
	float w = 1.0 - u - v;
	vec3 baryCoords = vec3(
		clamp(w, 0.0, 1.0),
		clamp(u, 0.0, 1.0),
		clamp(v, 0.0, 1.0)
	);
	
	// Normalize barycentric coordinates to ensure they sum to 1.0
	float barySum = baryCoords.x + baryCoords.y + baryCoords.z;
	if (barySum > 0.0) {
		baryCoords /= barySum;
	} else {
		// Fallback for extreme cases
		baryCoords = vec3(1.0/3.0);
	}
	
	// Calculate position and normal with the validated coordinates
	vec3 position = ray.origin + t * ray.direction;
	vec3 normal = normalize(cross(edge1, edge2));
	
	// Ensure normal faces away from ray direction
	if (dot(normal, ray.direction) > 0.0) {
		normal = -normal;
	}
	
	// Fill hit record
	record.t = t;
	record.position = position;
	record.normal = normal;
	record.hit = true;
	record.barycentricCoords = baryCoords;
	record.hitType = 1; // Triangle hit
	
	return true;
}

HitRecord BLAS_intersection(Ray ray, uint meshIdx, HitRecord hitInfo)
{
	BVHNode nodeStack[64];
	int stackIndex = 0;

	MeshInfo currentMesh = meshes[meshIdx];

	uint rootNodeIndex = currentMesh.bvhNodeOffset;
	nodeStack[stackIndex++] = nodes[rootNodeIndex];

	const float bboxTolerance = 0.001;
	const vec3 bboxEpsilon = vec3(bboxTolerance);

	uint posOffset = currentMesh.positionOffset;
	
	while (stackIndex > 0)
	{
		BVHNode node = nodeStack[--stackIndex];
		
		vec3 minBounds = vec3(node.minX, node.minY, node.minZ) - bboxEpsilon;
		vec3 maxBounds = vec3(node.maxX, node.maxY, node.maxZ) + bboxEpsilon;
		
		float tNear, tFar;
		if (AABB_intersect(ray, minBounds, maxBounds, tNear, tFar))
		{
			if (tNear > hitInfo.t)
			{
				continue;
			}

			if (node.leftChildOrPrimOffset <= 0) //? Leaf node
			{
				//? Calculate primitive offset and count
				int primitiveOffset = -node.leftChildOrPrimOffset;  //? Convert to positive offset
				int primitiveCount = 1; //? for now just one but might change in the future then use node.rightChildOrPrimCount

				for (int i = 0; i < primitiveCount; i++)
				{
					//? Get triangle index from the primitiveOffset
					uint triIndex = primitiveOffset + i;

					//? Get vertex indices for this triangle, applying mesh index offset
					uint indexA = indices[triIndex + 0];
					uint indexB = indices[triIndex + 1];
					uint indexC = indices[triIndex + 2];

					//? Get the vertex positions, applying mesh position offset
					uint posA = posOffset + indexA * 3;
					uint posB = posOffset + indexB * 3;
					uint posC = posOffset + indexC * 3;

					//? Get vertex positions
					vec3 v0 = vec3(positions[posA + 0], positions[posA + 1], positions[posA + 2]);
					vec3 v1 = vec3(positions[posB + 0], positions[posB + 1], positions[posB + 2]);
					vec3 v2 = vec3(positions[posC + 0], positions[posC + 1], positions[posC + 2]);

					// vec3 n0 = vec3(normals[posA], normals[posA + 1], normals[posA + 2]);
					// vec3 n1 = vec3(normals[posB], normals[posB + 1], normals[posB + 2]);
					// vec3 n2 = vec3(normals[posC], normals[posC + 1], normals[posC + 2]);
					
					//? Check intersection with triangle
					HitRecord tempRecord;
					if (intersectTriangle(ray, v0, v1, v2, tempRecord, hitInfo.t, meshIdx)) {
						hitInfo = tempRecord;
						hitInfo.triangleIndex = triIndex;
						hitInfo.hitType = 1; //? Triangle hit
					}
				}
			}
			else //? Internal node - push children to the stack
			{
				//? Make sure we have valid child indices
				int leftChild = node.leftChildOrPrimOffset;
				int rightChild = node.rightChildOrPrimCount;
				
				if (leftChild >= 0 && leftChild < nodes.length()) {
					nodeStack[stackIndex++] = nodes[leftChild];
				}
				if (rightChild >= 0 && rightChild < nodes.length()) {
					nodeStack[stackIndex++] = nodes[rightChild];
				}
				
			}
		}
	}

	return hitInfo;
}

//? Function to create a ray from camera through pixel
Ray createCameraRay(ivec2 pixelCoords, ivec2 dimensions) {
	//? Convert pixel to NDC coordinates ([-1, 1])
	vec2 uv = 2.0 * vec2(pixelCoords) / vec2(dimensions) - 1.0;
	
	//? Create a point in clip space
	vec4 clipPos = vec4(uv.x, -uv.y, 1.0, 1.0);
	
	//? Transform to world space using inverse view-projection matrix
	vec4 worldPos = viewProjectionInverseMatrix * clipPos;
	worldPos /= worldPos.w; //? Perspective divide
	
	//? Create ray
	Ray ray;
	ray.origin = cameraPosition;
	ray.direction = normalize(vec3(worldPos) - ray.origin);
	ray.invDirection = GetInverseDirection(ray.direction);
	
	return ray;
}

//? Simple sky color function
vec3 getSkyColor(vec3 direction) {
	float t = 0.5 * (direction.y + 1.0);
	return mix(vec3(1.0), vec3(0.5, 0.7, 1.0), t);
}

//? Main path tracing function
vec3 trace(Ray ray) {
	// HitRecord record;

	// record.hit = false;
	// record.t = INF;
	// record.hitType = 0; //? Miss
	

	// for (uint i = 0; i < numMeshes; i++)
	// {
	// 	record = BLAS_intersection(ray, i, record);
	// }
	HitRecord closestHit;
	closestHit.hit = false;
	closestHit.t = INF;
	closestHit.hitType = 0; // Miss
	
	// Loop through all meshes
	for (uint i = 0; i < numMeshes; i++) {
		// Get intersection for this mesh
		HitRecord meshHit = BLAS_intersection(ray, i, closestHit);
		
		// Update closest hit if this mesh has a closer intersection
		if (meshHit.hit && meshHit.t < closestHit.t) {
			closestHit = meshHit;
			// Store mesh index if needed
			// closestHit.meshIndex = i; // Would need to add this field to HitRecord
		}
	}
	// record = bruteForceTriangleCheck(ray);

	
	if (closestHit.hit) {
		//? Color based on hit type
		if (closestHit.hitType == 3) { //? Leaf node
			return vec3(0.0, 1.0, 0.0); //? Green for leaf nodes
		} else if (closestHit.hitType == 2) { //? Bounding box
			return vec3(0.0, 0.0, 0.0); //? Magenta for bounding boxes
		} else if (closestHit.hitType == 1) { //? Triangle
			//? Standard shading with normal
			vec3 normalColor = closestHit.normal * 0.5 + 0.5;
			return normalColor;
			
			//? Simple directional light from above
			vec3 lightDir = normalize(vec3(0.5, 1.0, 0.2));
			float diffuse = max(0.0, dot(closestHit.normal, lightDir));
			
			//? Calculate checkerboard pattern for visualization
			float scale = 5.0;
			vec3 p = closestHit.position * scale;
			float pattern = mod(floor(p.x) + floor(p.z), 2.0);
			vec3 checkerColor = mix(vec3(0.8), vec3(0.3), pattern);
			
			//? Mix normal color with checker pattern
			vec3 finalColor = mix(normalColor, checkerColor, 0.3);
			
			//? Apply lighting
			return finalColor * (0.2 + 0.8 * diffuse);
		}
	}
	
	//? No hit, return sky color
	return getSkyColor(ray.direction);
}

void main()
{
	//? Get the current pixel coordinates
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
	
	//? Get the dimensions of the output image
	ivec2 dimensions = imageSize(imageOutput);
	
	//? Only process pixels within the image bounds
	if (pixelCoords.x < dimensions.x && pixelCoords.y < dimensions.y)
	{
		//? Create a camera ray for this pixel
		Ray ray = createCameraRay(pixelCoords, dimensions);
		
		//? Trace the ray and get the color
		vec3 color = trace(ray);
		
		//? Store the color in the output image (with alpha = 1.0)
		imageStore(imageOutput, pixelCoords, vec4(color, 1.0));
	}
}