#version 460 core

// Define the workgroup size
layout(local_size_x = 32) in;

// Input buffers
layout(std430, binding = 5) buffer triangleVertices {
    float vertices[]; 
};

layout(std430, binding = 6) buffer triangleIndices {
    uint indices[]; 
};

layout(std430, binding = 7) buffer triangleAABBs {
    float aabbs[]; 
};

// Make sure the model matrix is declared exactly like this
uniform mat4 model;
uniform int numTriangles;

const uint indicesOffset = 3;
const uint aabbOffset = 6;

void main() {
    // Get the global ID
    uint gID = gl_GlobalInvocationID.x;
    if (gID >= numTriangles) return; // Ensure we don't go out of bounds
    
    uint indexA = gID * indicesOffset;
    uint indexB = gID * indicesOffset + 1;
    uint indexC = gID * indicesOffset + 2;

    // Get vertex positions from buffer
    vec3 v0 = vec3(vertices[indices[indexA] * 3], vertices[indices[indexA] * 3 + 1], vertices[indices[indexA] * 3 + 2]);
    vec3 v1 = vec3(vertices[indices[indexB] * 3], vertices[indices[indexB] * 3 + 1], vertices[indices[indexB] * 3 + 2]);
    vec3 v2 = vec3(vertices[indices[indexC] * 3], vertices[indices[indexC] * 3 + 1], vertices[indices[indexC] * 3 + 2]);

    // Transform vertices by model matrix
    vec3 v0Transformed = (model * vec4(v0, 1.0)).xyz;
    vec3 v1Transformed = (model * vec4(v1, 1.0)).xyz;
    vec3 v2Transformed = (model * vec4(v2, 1.0)).xyz;
    
    // Calculate the AABB for the transformed triangle
    vec3 minPoint = min(min(v0Transformed, v1Transformed), v2Transformed);
    vec3 maxPoint = max(max(v0Transformed, v1Transformed), v2Transformed);
    
    // Store the AABB in the output buffer
    uint aabbIndex = gID * aabbOffset;
    aabbs[aabbIndex + 0] = minPoint.x;
    aabbs[aabbIndex + 1] = minPoint.y;
    aabbs[aabbIndex + 2] = minPoint.z;
    aabbs[aabbIndex + 3] = maxPoint.x;
    aabbs[aabbIndex + 4] = maxPoint.y;
    aabbs[aabbIndex + 5] = maxPoint.z;
}