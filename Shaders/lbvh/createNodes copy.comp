#version 460 core

// Define the workgroup size - for triangles, we only need 1 thread per triangle
layout(local_size_x = 32) in;

// SSBOs for mesh data
layout(std430, binding = 20) buffer meshPositions {
    float positions[]; // Flat array of vertex positions
};

layout(std430, binding = 21) buffer meshNormals {
    float normals[]; // Flat array of vertex normals
};

layout(std430, binding = 22) buffer meshIndices {
    uint indices[]; // Flat array of triangle indices
};

struct BVHNode
{
	float minX, minY, minZ;    // 12 bytes - bounding box min point
	float maxX, maxY, maxZ;    // 12 bytes - bounding box max point
	int leftChildOrPrimOffset;  // 4 bytes - child node index or triangleId offset if negative
	int rightChildOrPrimCount;  // 4 bytes - right child index or primitive count when leftChildOrPrimOffset < 0
};

struct BVHNodeRender
{
	float minX, minY, minZ;    // 12 bytes - bounding box min point
	float maxX, maxY, maxZ;    // 12 bytes - bounding box max point
	int level;
	int leaf;
};

layout(std430, binding = 24) buffer reccAABB {
    BVHNode nodes[];
};

struct MeshInfo
{
	mat4 invModelMatrix;
	uint positionOffset; // Offset into the positions array
	uint normalOffset;	 // Offset into the normals array
	uint indexOffset;	 // Offset into the indices array
	uint numVertices;	 // Number of vertices in this mesh
	uint numIndices;	 // Number of indices in this mesh
	uint numFaces;		 // Number of triangles (numIndices / 3)
	uint bvhNodeOffset;	 // Offset into the BVH nodes array for this mesh
	uint aabbOffset;	 // Offset into the AABB array for this mesh
};

layout(std430, binding = 30) buffer meshInfo {
    MeshInfo meshes[];
};


uniform mat4 model; // Added model matrix uniform
// uniform uint numFaces;
uniform uint meshIndex;

void calculate_min_max_leaf(uint gID, uint numFaces) {
	const uint numInternalNodes = numFaces - 1;
	uint triangleIndex = gID - numInternalNodes;
    // Early out if we're beyond the triangle count
    // Each triangle has 3 indices, so divide by 3
    if (triangleIndex >= numFaces) return;
    
    // Each triangle starts at a multiple of 3 in the indices array
    uint triangleBase = triangleIndex * 3;
    uint indexA = indices[triangleBase];
    uint indexB = indices[triangleBase + 1];
    uint indexC = indices[triangleBase + 2];

    // Get vertex positions
    vec3 v0 = vec3(positions[indexA * 3], positions[indexA * 3 + 1], positions[indexA * 3 + 2]);
    vec3 v1 = vec3(positions[indexB * 3], positions[indexB * 3 + 1], positions[indexB * 3 + 2]);
    vec3 v2 = vec3(positions[indexC * 3], positions[indexC * 3 + 1], positions[indexC * 3 + 2]);
    
    // Transform vertices by the model matrix
    vec3 v0Transformed = (model * vec4(v0, 1.0)).xyz;
    vec3 v1Transformed = (model * vec4(v1, 1.0)).xyz;
    vec3 v2Transformed = (model * vec4(v2, 1.0)).xyz;

    // Calculate AABB for transformed vertices
    vec3 aabbMin = min(min(v0Transformed, v1Transformed), v2Transformed);
    vec3 aabbMax = max(max(v0Transformed, v1Transformed), v2Transformed);

	BVHNode node;
	node.minX = aabbMin.x;
	node.minY = aabbMin.y;
	node.minZ = aabbMin.z;
	node.maxX = aabbMax.x;
	node.maxY = aabbMax.y;
	node.maxZ = aabbMax.z;
	node.leftChildOrPrimOffset = -int(triangleBase);
	node.rightChildOrPrimCount = -1; // Placeholder for right child index or primitive count
	nodes[gID] = node; // Store the node in the BVH array
}

void main()
{
    uint gID = gl_GlobalInvocationID.x;

	MeshInfo mesh = meshes[meshIndex];
    uint numFaces = mesh.numFaces;
    // Early exit if beyond total node count
    const uint numNodes = numFaces * 2 - 1;
    if (gID >= numNodes) return;
    
    const uint numInternalNodes = numFaces - 1;

    // Initialize all node fields
    nodes[gID].minX = 9999999.0;
    nodes[gID].minY = 9999999.0;
    nodes[gID].minZ = 9999999.0;
    nodes[gID].maxX = -9999999.0;
    nodes[gID].maxY = -9999999.0;
    nodes[gID].maxZ = -9999999.0;
    nodes[gID].leftChildOrPrimOffset = -1;
    nodes[gID].rightChildOrPrimCount = -1;

    if (gID < numInternalNodes)
    {
        // Internal node processing
        uint leftChildLogical = 2 * gID + 1;
        uint rightChildLogical = 2 * gID + 2;

        // Left child assignment
        if (leftChildLogical < numInternalNodes) {
            nodes[gID].leftChildOrPrimOffset = int(leftChildLogical);
        } else {
            uint leafIndex = leftChildLogical - numInternalNodes;
            nodes[gID].leftChildOrPrimOffset = int(numInternalNodes + leafIndex);
        }

        // Right child assignment
        if (rightChildLogical < numInternalNodes) {
            nodes[gID].rightChildOrPrimCount = int(rightChildLogical);
        } else {
            uint leafIndex = rightChildLogical - numInternalNodes;
            nodes[gID].rightChildOrPrimCount = int(numInternalNodes + leafIndex);
        }
    }
    else
    {
		// nodes[gID].minX = 1.0f;
		// nodes[gID].minY = 1.0f;
		// nodes[gID].minZ = 1.0f;
		// nodes[gID].maxX = 1.0f;
		// nodes[gID].maxY = 1.0f;
		// nodes[gID].maxZ = 1.0f;
        // Leaf node processing
        // uint triangleIndex = gID - numInternalNodes;
        // calculate_min_max_leaf(triangleIndex);
        calculate_min_max_leaf(gID, numFaces);
    }
}

// void main()
// {
// 	uint gID = gl_GlobalInvocationID.x;

// 	// const uint numNodes = numFaces * 2 - 1;
// 	// const uing numLeafs = numFaces;
// 	const uint numInternalNodes = numFaces - 1;

// 	nodes[gID].leftChildOrPrimOffset = -1; // Initialize to -1 (no child)
// 	nodes[gID].rightChildOrPrimCount = -1; // Initialize to -1 (no child)

// 	if (gID < numInternalNodes)
// 	{
// 		uint leftChildLogical = 2 * gID + 1;
// 		uint rightChildLogical = 2 * gID + 2;

// 		// Determine if the left child is an internal node or a leaf node
// 		if (leftChildLogical < numInternalNodes)
// 		{
// 			// Left child is another internal node
// 			nodes[gID].leftChildOrPrimOffset = int(leftChildLogical);
// 		}
// 		else
// 		{
// 			// Left child is a leaf node - adjust index to the leaf section
// 			nodes[gID].leftChildOrPrimOffset = int(numInternalNodes + (leftChildLogical - numInternalNodes));
// 		}

// 		// Determine if the right child is an internal node or a leaf node
// 		if (rightChildLogical < numInternalNodes)
// 		{
// 			// Right child is another internal node
// 			nodes[gID].rightChildOrPrimCount = int(rightChildLogical);
// 		}
// 		else
// 		{
// 			// Right child is a leaf node - adjust index to the leaf section
// 			nodes[gID].rightChildOrPrimCount = int(numInternalNodes + (rightChildLogical - numInternalNodes));
// 		}

// 		// Calculate the primitive range for this internal node
// 		// (it spans all primitives covered by its children)
// 		// This will be filled in once all children are processed
// 		// nodes[gID].min = 9999999;
// 		// nodes[gID].max = -9999999;
// 	}
// 	else //? leaf node
// 	{
// 		uint primIndex = gID - numInternalNodes;
// 		// nodes[gID].min = primIndex;
// 		// nodes[gID].max = primIndex;
// 		calculate_min_max_leaf(gID);
// 	}
// }



// void main() {
//     // Get the global ID
//     uint gID = gl_GlobalInvocationID.x;
    
//     // Early out if we're beyond the triangle count
//     // Each triangle has 3 indices, so divide by 3
//     if (gID >= numFaces) return;
    
//     // Each triangle starts at a multiple of 3 in the indices array
//     uint triangleBase = gID * 3;
//     uint indexA = indices[triangleBase];
//     uint indexB = indices[triangleBase + 1];
//     uint indexC = indices[triangleBase + 2];

//     // Get vertex positions
//     vec3 v0 = vec3(positions[indexA * 3], positions[indexA * 3 + 1], positions[indexA * 3 + 2]);
//     vec3 v1 = vec3(positions[indexB * 3], positions[indexB * 3 + 1], positions[indexB * 3 + 2]);
//     vec3 v2 = vec3(positions[indexC * 3], positions[indexC * 3 + 1], positions[indexC * 3 + 2]);
    
//     // Transform vertices by the model matrix
//     vec3 v0Transformed = (model * vec4(v0, 1.0)).xyz;
//     vec3 v1Transformed = (model * vec4(v1, 1.0)).xyz;
//     vec3 v2Transformed = (model * vec4(v2, 1.0)).xyz;

//     // Calculate AABB for transformed vertices
//     vec3 aabbMin = min(min(v0Transformed, v1Transformed), v2Transformed);
//     vec3 aabbMax = max(max(v0Transformed, v1Transformed), v2Transformed);

//     // Store AABB (6 floats per triangle: 3 for min, 3 for max)
//     uint aabbIndex = gID * 6;
//     aabbs[aabbIndex + 0] = aabbMin.x;
//     aabbs[aabbIndex + 1] = aabbMin.y;
//     aabbs[aabbIndex + 2] = aabbMin.z;
//     aabbs[aabbIndex + 3] = aabbMax.x;
//     aabbs[aabbIndex + 4] = aabbMax.y;
//     aabbs[aabbIndex + 5] = aabbMax.z;

// 	BVHNode node;
// 	node.minX = aabbMin.x;
// 	node.minY = aabbMin.y;
// 	node.minZ = aabbMin.z;
// 	node.maxX = aabbMax.x;
// 	node.maxY = aabbMax.y;
// 	node.maxZ = aabbMax.z;
// 	node.leftChildOrPrimOffset = -int(triangleBase);
// 	node.rightChildOrPrimCount = -1; // Placeholder for right child index or primitive count
// 	nodes[gID] = node; // Store the node in the BVH array
// }
